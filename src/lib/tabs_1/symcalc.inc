TriangleVoxel v(pp);
v.transform(2);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(1);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)53; //000000FFFFFF
} else {
return (symmetries_t)15; //000000000FFF
}
} else {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)27; //00000003F03F
} else {
TriangleVoxel v(pp);
v.transform(18);
if (pp->identicalInBB(&v)) {
return (symmetries_t)52; //000000FC003F
} else {
return (symmetries_t)3; //00000000003F
}
}
}
} else {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)47; //000000555555
} else {
TriangleVoxel v(pp);
v.transform(13);
if (pp->identicalInBB(&v)) {
return (symmetries_t)51; //000000AAA555
} else {
return (symmetries_t)11; //000000000555
}
}
} else {
TriangleVoxel v(pp);
v.transform(7);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)50; //000000A95A95
} else {
TriangleVoxel v(pp);
v.transform(13);
if (pp->identicalInBB(&v)) {
return (symmetries_t)48; //00000056AA95
} else {
return (symmetries_t)14; //000000000A95
}
}
} else {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)23; //000000015015
} else {
TriangleVoxel v(pp);
v.transform(13);
if (pp->identicalInBB(&v)) {
return (symmetries_t)26; //00000002A015
} else {
TriangleVoxel v(pp);
v.transform(18);
if (pp->identicalInBB(&v)) {
return (symmetries_t)46; //000000540015
} else {
TriangleVoxel v(pp);
v.transform(19);
if (pp->identicalInBB(&v)) {
return (symmetries_t)49; //000000A80015
} else {
return (symmetries_t)2; //000000000015
}
}
}
}
}
}
}
} else {
TriangleVoxel v(pp);
v.transform(3);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(18);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
return (symmetries_t)43; //000000249249
} else {
TriangleVoxel v(pp);
v.transform(7);
if (pp->identicalInBB(&v)) {
return (symmetries_t)44; //000000252489
} else {
TriangleVoxel v(pp);
v.transform(8);
if (pp->identicalInBB(&v)) {
return (symmetries_t)45; //000000264909
} else {
return (symmetries_t)42; //000000240009
}
}
}
} else {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
return (symmetries_t)8; //000000000249
} else {
TriangleVoxel v(pp);
v.transform(7);
if (pp->identicalInBB(&v)) {
return (symmetries_t)10; //000000000489
} else {
TriangleVoxel v(pp);
v.transform(8);
if (pp->identicalInBB(&v)) {
return (symmetries_t)13; //000000000909
} else {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)20; //000000009009
} else {
TriangleVoxel v(pp);
v.transform(13);
if (pp->identicalInBB(&v)) {
return (symmetries_t)22; //000000012009
} else {
TriangleVoxel v(pp);
v.transform(14);
if (pp->identicalInBB(&v)) {
return (symmetries_t)25; //000000024009
} else {
return (symmetries_t)1; //000000000009
}
}
}
}
}
}
}
} else {
TriangleVoxel v(pp);
v.transform(18);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
return (symmetries_t)29; //000000041041
} else {
TriangleVoxel v(pp);
v.transform(7);
if (pp->identicalInBB(&v)) {
return (symmetries_t)30; //000000042081
} else {
TriangleVoxel v(pp);
v.transform(8);
if (pp->identicalInBB(&v)) {
return (symmetries_t)31; //000000044101
} else {
TriangleVoxel v(pp);
v.transform(9);
if (pp->identicalInBB(&v)) {
return (symmetries_t)32; //000000048201
} else {
TriangleVoxel v(pp);
v.transform(10);
if (pp->identicalInBB(&v)) {
return (symmetries_t)33; //000000050401
} else {
TriangleVoxel v(pp);
v.transform(11);
if (pp->identicalInBB(&v)) {
return (symmetries_t)34; //000000060801
} else {
return (symmetries_t)28; //000000040001
}
}
}
}
}
}
} else {
TriangleVoxel v(pp);
v.transform(21);
if (pp->identicalInBB(&v)) {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
return (symmetries_t)39; //000000208041
} else {
TriangleVoxel v(pp);
v.transform(7);
if (pp->identicalInBB(&v)) {
return (symmetries_t)40; //000000210081
} else {
TriangleVoxel v(pp);
v.transform(8);
if (pp->identicalInBB(&v)) {
return (symmetries_t)41; //000000220101
} else {
TriangleVoxel v(pp);
v.transform(9);
if (pp->identicalInBB(&v)) {
return (symmetries_t)36; //000000201201
} else {
TriangleVoxel v(pp);
v.transform(10);
if (pp->identicalInBB(&v)) {
return (symmetries_t)37; //000000202401
} else {
TriangleVoxel v(pp);
v.transform(11);
if (pp->identicalInBB(&v)) {
return (symmetries_t)38; //000000204801
} else {
return (symmetries_t)35; //000000200001
}
}
}
}
}
}
} else {
TriangleVoxel v(pp);
v.transform(6);
if (pp->identicalInBB(&v)) {
return (symmetries_t)4; //000000000041
} else {
TriangleVoxel v(pp);
v.transform(7);
if (pp->identicalInBB(&v)) {
return (symmetries_t)5; //000000000081
} else {
TriangleVoxel v(pp);
v.transform(8);
if (pp->identicalInBB(&v)) {
return (symmetries_t)6; //000000000101
} else {
TriangleVoxel v(pp);
v.transform(9);
if (pp->identicalInBB(&v)) {
return (symmetries_t)7; //000000000201
} else {
TriangleVoxel v(pp);
v.transform(10);
if (pp->identicalInBB(&v)) {
return (symmetries_t)9; //000000000401
} else {
TriangleVoxel v(pp);
v.transform(11);
if (pp->identicalInBB(&v)) {
return (symmetries_t)12; //000000000801
} else {
TriangleVoxel v(pp);
v.transform(12);
if (pp->identicalInBB(&v)) {
return (symmetries_t)16; //000000001001
} else {
TriangleVoxel v(pp);
v.transform(13);
if (pp->identicalInBB(&v)) {
return (symmetries_t)17; //000000002001
} else {
TriangleVoxel v(pp);
v.transform(14);
if (pp->identicalInBB(&v)) {
return (symmetries_t)18; //000000004001
} else {
TriangleVoxel v(pp);
v.transform(15);
if (pp->identicalInBB(&v)) {
return (symmetries_t)19; //000000008001
} else {
TriangleVoxel v(pp);
v.transform(16);
if (pp->identicalInBB(&v)) {
return (symmetries_t)21; //000000010001
} else {
TriangleVoxel v(pp);
v.transform(17);
if (pp->identicalInBB(&v)) {
return (symmetries_t)24; //000000020001
} else {
return (symmetries_t)0; //000000000001
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
